// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  HUMAN
  BOT
}

enum RepresentationType {
  PREVIEW
  RENDER
  MODEL
  TEXTURE
}

enum RepresentationFormat {
  IMG
  FBX
  GLB
  MAX
  MB
  OBJ
  C4D
  UNREAL
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  users       User[]
  createAt    DateTime     @default(now())
  updateAt    DateTime?    @updatedAt
  isDeleted   Boolean      @default(false)
  permissions Permission[]
}

model User {
  id                     String           @id @default(cuid())
  email                  String           @unique
  account                String           @unique
  password               String
  name                   String
  roleId                 String
  role                   Role             @relation(fields: [roleId], references: [id])
  type                   UserType         @default(HUMAN)
  createdAssets          Asset[]
  uploadedRepresentation Representation[]
  createAt               DateTime         @default(now())
  updateAt               DateTime?        @updatedAt
  authTokens             AuthToken[]
  active                 Boolean          @default(true)
  extenData              Json?
}

// 資產
model Asset {
  id              String           @id @default(cuid())
  name            String
  creatorId       String
  creator         User             @relation(fields: [creatorId], references: [id])
  representations Representation[]
  category        Category         @relation(fields: [categoryId], references: [id])
  categoryId      String
  tags            Tag[]
  createAt        DateTime         @default(now())
  updateAt        DateTime?        @updatedAt
  isDeleted       Boolean          @default(false)
}

// 資產可以有多種格式，代表模型的檔案格式
model Representation {
  id         String               @id @default(cuid())
  name       String
  path       String?
  format     RepresentationFormat
  type       RepresentationType
  assetId    String
  asset      Asset                @relation(fields: [assetId], references: [id])
  uploaderId String
  uploader   User                 @relation(fields: [uploaderId], references: [id])
  createAt   DateTime             @default(now())
  updateAt   DateTime?            @updatedAt
  textureId  String?              @unique
  texture    Representation?      @relation("ModelTexture", fields: [textureId], references: [id])
  models     Representation[]     @relation("ModelTexture")
}

model Category {
  id        String     @id @default(cuid())
  name      String?
  parentId  String?
  parent    Category?  @relation("CategoryTree", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryTree")
  assets    Asset[]
  createAt  DateTime   @default(now())
  updateAt  DateTime?  @updatedAt
  isDeleted Boolean    @default(false)
  isVisible Boolean    @default(true)
}

model Tag {
  id       String    @id @default(cuid())
  name     String
  assets   Asset[]
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
}

model Permission {
  codeName String    @id // create, update, delete
  name     String
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
  Role     Role[]
}

model AuthToken {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  createAt DateTime @default(now())
}

model Menu {
  id          String    @id @default(cuid())
  name        String    @unique
  iconName    String
  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt
  isDeleted   Boolean   @default(false)
  isVisible   Boolean   @default(true)
  isProtected Boolean   @default(false) // 是否需要登入才能看到
  sortOrder   Int       @default(0)
}
